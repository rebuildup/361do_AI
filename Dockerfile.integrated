# Multi-stage Dockerfile for React Frontend + FastAPI Backend Integration
# React フロントエンド + FastAPI バックエンド統合用マルチステージ Dockerfile

# ========================================
# Stage 1: Frontend Build (Node.js)
# ========================================
FROM node:18-alpine AS frontend-builder

# Set working directory for frontend
WORKDIR /app/frontend

# Copy package files
COPY frontend/package.json frontend/yarn.lock ./

# Install dependencies
RUN yarn install --frozen-lockfile --production=false

# Copy frontend source code
COPY frontend/ ./

# Build the React application
RUN yarn build

# Verify build output
RUN ls -la dist/

# ========================================
# Stage 2: Backend Build (Python)
# ========================================
FROM nvidia/cuda:12.1-devel-ubuntu22.04 AS backend-builder

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-dev \
    python3-pip \
    git \
    curl \
    wget \
    build-essential \
    cmake \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1
RUN update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# Upgrade pip
RUN pip install --upgrade pip setuptools wheel

# Set working directory for backend
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# ========================================
# Stage 3: Production Runtime
# ========================================
FROM nvidia/cuda:12.1-runtime-ubuntu22.04 AS production

# Metadata
LABEL maintainer="Self-Learning AI Agent Team"
LABEL description="Self-Learning AI Agent with React Frontend Integration"
LABEL version="2.0.0"

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV CUDA_VISIBLE_DEVICES=0
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV PYTHONPATH=/app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    curl \
    wget \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1
RUN update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# Create application user
RUN useradd -m -u 1000 agent && \
    mkdir -p /app /var/log/supervisor /etc/supervisor/conf.d

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=backend-builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Copy backend application code
COPY . /app/

# Copy built frontend from frontend-builder stage
COPY --from=frontend-builder /app/frontend/dist /app/frontend/dist

# Create static files directory and copy frontend build
RUN mkdir -p /app/static && \
    cp -r /app/frontend/dist/* /app/static/ && \
    chown -R agent:agent /app/static

# Configure Nginx for serving React frontend and proxying API
COPY docker/nginx/integrated.conf /etc/nginx/nginx.conf
RUN rm -f /etc/nginx/sites-enabled/default

# Configure Supervisor for managing multiple processes
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create necessary directories and set permissions
RUN mkdir -p /app/data /app/logs /app/models /app/config && \
    chown -R agent:agent /app && \
    chmod +x /app/scripts/*.sh 2>/dev/null || true

# Copy entrypoint script
COPY docker/entrypoint-integrated.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Expose ports
EXPOSE 80 8000 8501

# Health check for integrated application
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health || curl -f http://localhost:8000/v1/health || exit 1

# Switch to application user
USER agent

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Default command
CMD ["integrated"]